---
- name: Remove apache2
  apt:
    name: apache2
    state: absent

- name: Install nginx
  apt:
    pkg:
      - nginx
    state: present

- name: Add key for passenger
  apt_key:
    url: http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xAC40B2F7
    state: present

- name: Apt via https
  apt:
    name: apt-transport-https
    state: present

- name: Apt add passenger to list
  apt_repository:
    repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ansible_distribution_release}} main'
    state: present
    update_cache: yes

- name: Install passenger
  apt:
    pkg:
      - libnginx-mod-http-passenger
    state: present

- name: Ensure that deploy owns /srv/www
  file:
    owner: deploy
    group: deploy
    path: /srv/www
    state: directory

- name: Ensure that /srv/www/shared exists
  file:
    path: /srv/www/shared
    owner: deploy
    group: deploy
    state: directory

- name: Ensure git is installed
  apt:
    pkg: git

- name: Add postgresql apt signing key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc

- name: Add postgresql apt repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main

- name: Install postgresql 13
  apt:
    pkg:
      - postgresql-13
      - postgresql-client-13
      - libpq-dev
    update_cache: yes

- name: Trust local database access
  template:
    src: pg_hba.conf
    dest: /etc/postgresql/13/main/pg_hba.conf
    owner: postgres
    group: postgres

# We want the restart to happen immediately so that postgresl will be available
# for later tasks
- name: Restart postgresql
  service:
    name: postgresql
    state: restarted

- name: Make sure the right version of postgresql starts at boot
  systemd:
    state: started
    name: postgresql@13-main

# Installing via bash so that rvm is used. Otherwise would install gems for default system ruby
- name: Install bundler gem
  command: bash -lc "gem install bundler --version 2.1.4"
  args:
    creates: "/usr/local/lib/rvm/gems/ruby-2.5.1/gems/bundler-*"

- name: Install package dependencies that allow gem native extensions to be built
  apt:
    pkg:
      - libmysqlclient-dev
      - g++
      # Required for encryption in eventmachine
      - libssl-dev

- name: Ensure that .env exists
  template:
    src: env
    dest: /srv/www/shared/.env
    owner: deploy
    group: deploy
  notify: nginx restart
  # TODO: Should also restart the log daemon

- name: Directory to hold configs for ssl on tracking links
  file:
    path: /etc/cuttlefish-ssl
    owner: deploy
    group: deploy
    state: directory

- name: Directory to hold nginx configs for ssl on tracking links
  file:
    path: /etc/cuttlefish-ssl/nginx-sites
    owner: deploy
    group: deploy
    state: directory

- name: Generate the overall nginx config
  template:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  notify: nginx reload

- name: Generate the nginx config for the app
  template:
    src: default
    dest: /etc/nginx/sites-available/
    owner: root
    group: root
    mode: "644"
  notify: nginx reload

- name: Install python module requirement for ansible creating postgresql db
  apt:
    pkg: python3-psycopg2

- name: Create cuttlefish postgresql database
  postgresql_db:
    name: cuttlefish

- name: Create cuttlefish posgresql role
  postgresql_user:
    db: cuttlefish
    name: cuttlefish
    password: "{{ db_password }}"
    encrypted: yes

- name: Create postgresql role for root so it can do backups
  postgresql_user:
    name: root
    role_attr_flags: SUPERUSER

- name: Copy over database configuration for application
  template:
    src: database.yml
    dest: /srv/www/shared/database.yml
    owner: deploy
    group: deploy
  notify: nginx restart

- name: Allow deploy user to export foreman script
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /usr/local/lib/rvm/wrappers/default/bundle exec foreman export systemd /etc/systemd/system -a cuttlefish -u deploy -l /srv/www/shared/log -f Procfile.production'
    validate: 'visudo -cf %s'

- name: Allow deploy user to reload systemd daemon after changing config
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl daemon-reload'
    validate: 'visudo -cf %s'

- name: Allow deploy user to start cuttlefish service
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl start cuttlefish.target'
    validate: 'visudo -cf %s'

- name: Allow deploy user to stop cuttlefish service
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl stop cuttlefish.target'
    validate: 'visudo -cf %s'

- name: Allow deploy user to restart cuttlefish service
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart cuttlefish.target'
    validate: 'visudo -cf %s'

- name: Allow deploy user to check the nginx configuration
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /usr/sbin/service nginx configtest'
    validate: 'visudo -cf %s'

- name: Allow deploy user to reload the nginx configuration
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'deploy ALL=(ALL) NOPASSWD: /usr/sbin/service nginx reload'
    validate: 'visudo -cf %s'

- name: Allow deploy to read some log files (different from admin group)
  user:
    name: deploy
    groups: adm
    append: yes

- name: Install certbot
  apt:
    pkg: certbot
    update_cache: yes

# We need this for the next step (which needs to happen before certbot runs
# the first time)
- name: Create hook certbot renewal hook directory
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory
    mode: "0755"

# Note that we're doing this before the certificate is generated because we want
# the new certificate copied across immediately. But the slight hassle is we
# need to ensure that the directory exists before we can run this (which otherwise
# would have been created by certbot)
- name: Install script for copying certs for cuttlefish daemon
  template:
    src: copy-cuttlefish-daemon-certs.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/copy-cuttlefish-daemon-certs
    mode: 755

- name: Install certificate using certbot
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew_user: root
    certbot_auto_renew_minute: 10
    certbot_auto_renew_hour: 7
    certbot_auto_renew_options: '--no-self-upgrade --pre-hook "service nginx stop" --post-hook "service nginx start"'
    certbot_create_if_missing: yes
    certbot_certs:
      - email: contact@oaf.org.au
        domains:
          - cuttlefish.oaf.org.au
          - cuttlefish.io


- name: Daily archiving and deny list removal tasks
  cron:
    name: daily old email archiving
    job:  "cd /srv/www/current && /usr/local/lib/rvm/bin/rvm . do bundle exec rake cuttlefish:daily_tasks RAILS_ENV=production"
    user: deploy
    minute: "0"
    hour: "12"
